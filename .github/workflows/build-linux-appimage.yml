name: Build Linux x86 AppImage

on:
#  push:
#    branches: [ main ]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install AppImage build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            wget \
            fuse \
            libfuse2 \
            desktop-file-utils \
            zsync

      - name: Download AppImage tools
        run: |
          # 下载 appimagetool
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool
          
          # 下载 linuxdeploy (用于依赖收集)
          wget -O linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy

      - name: Build .NET application
        run: |
          # 构建 self-contained 应用
          dotnet publish NetworkMonitor.csproj \
            -c Release \
            -r linux-x64 \
            --self-contained true \
            -o publish \
            -p:PublishSingleFile=false \
            -p:PublishTrimmed=false

      - name: Analyze build output
        run: |
          echo "=== 构建输出分析 ==="
          ls -la publish/
          
          echo -e "\n=== 检查主程序 ==="
          file publish/NetworkMonitor
          ldd publish/NetworkMonitor || echo "静态链接或无动态依赖"
          
          echo -e "\n=== 检查动态库 ==="
          find publish -name "*.so" -exec file {} \;
          
          echo -e "\n=== 检查可执行权限 ==="
          ls -la publish/NetworkMonitor

      - name: Create AppDir structure
        run: |
          # 创建 AppDir 结构
          mkdir -p NetworkMonitor.AppDir/usr/bin
          mkdir -p NetworkMonitor.AppDir/usr/lib
          mkdir -p NetworkMonitor.AppDir/usr/share/applications
          mkdir -p NetworkMonitor.AppDir/usr/share/icons/hicolor/256x256/apps
          
          # 复制应用程序文件
          cp -r publish/* NetworkMonitor.AppDir/usr/bin/
          
          # 确保主程序可执行
          chmod +x NetworkMonitor.AppDir/usr/bin/NetworkMonitor
          
          # 创建桌面文件
          cat > NetworkMonitor.AppDir/usr/share/applications/networkmonitor.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Network Monitor
          Comment=Monitor network traffic and performance
          Exec=NetworkMonitor
          Icon=networkmonitor
          Categories=Network;System;Monitor;
          StartupNotify=true
          Terminal=false
          EOF
          
          # 创建 AppRun 启动脚本
          cat > NetworkMonitor.AppDir/AppRun << 'EOF'
          #!/bin/bash
          
          # 获取 AppImage 挂载目录
          HERE="$(dirname "$(readlink -f "${0}")")"
          
          # 设置库路径
          export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
          
          # 设置 .NET 环境变量
          export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
          
          # 启动应用
          exec "${HERE}/usr/bin/NetworkMonitor" "$@"
          EOF
          
          chmod +x NetworkMonitor.AppDir/AppRun
          
          # 创建简单图标（如果项目中没有图标）
          if [ ! -f "icon.png" ]; then
            # 创建一个简单的占位图标
            cat > NetworkMonitor.AppDir/usr/share/icons/hicolor/256x256/apps/networkmonitor.png << 'EOF'
          # 这里应该是一个实际的 PNG 图标文件
          # 如果没有图标，AppImage 仍然可以工作，只是没有图标而已
          EOF
          
            # 复制到 AppDir 根目录（AppImage 标准要求）
            cp NetworkMonitor.AppDir/usr/share/icons/hicolor/256x256/apps/networkmonitor.png NetworkMonitor.AppDir/
          else
            # 如果项目中有图标文件
            cp icon.png NetworkMonitor.AppDir/usr/share/icons/hicolor/256x256/apps/networkmonitor.png
            cp icon.png NetworkMonitor.AppDir/networkmonitor.png
          fi
          
          # 复制桌面文件到根目录
          cp NetworkMonitor.AppDir/usr/share/applications/networkmonitor.desktop NetworkMonitor.AppDir/

      - name: Collect dependencies with linuxdeploy
        run: |
          # 使用 linuxdeploy 自动收集依赖
          ./linuxdeploy \
            --appdir NetworkMonitor.AppDir \
            --executable NetworkMonitor.AppDir/usr/bin/NetworkMonitor \
            --desktop-file NetworkMonitor.AppDir/networkmonitor.desktop \
            --icon-file NetworkMonitor.AppDir/networkmonitor.png \
            --output appimage \
            || echo "linuxdeploy 可能失败，继续手动处理..."

      - name: Manual dependency collection (fallback)
        run: |
          echo "=== 手动收集依赖（备选方案） ==="
          
          # 检查是否需要手动收集依赖
          if [ ! -f NetworkMonitor-*-x86_64.AppImage ]; then
            echo "linuxdeploy 未生成 AppImage，手动处理..."
          
            # 收集共享库依赖
            echo "收集 .NET 运行时依赖..."
          
            # 复制 .NET 相关的 .so 文件到 lib 目录
            find NetworkMonitor.AppDir/usr/bin -name "*.so" -exec cp {} NetworkMonitor.AppDir/usr/lib/ \;
          
            # 检查系统依赖
            echo "检查系统依赖:"
            ldd NetworkMonitor.AppDir/usr/bin/NetworkMonitor | grep "=> /" | awk '{print $3}' | sort -u
          
            echo "AppDir 结构:"
            find NetworkMonitor.AppDir -type f | head -20
          fi

      - name: Create AppImage with appimagetool
        run: |
          # 如果 linuxdeploy 没有生成 AppImage，使用 appimagetool
          if [ ! -f NetworkMonitor-*-x86_64.AppImage ]; then
            echo "使用 appimagetool 创建 AppImage..."
          
            # 验证 AppDir 结构
            echo "验证 AppDir 结构:"
            ls -la NetworkMonitor.AppDir/
          
            # 验证必需文件
            if [ ! -f NetworkMonitor.AppDir/AppRun ]; then
              echo "错误: 缺少 AppRun"
              exit 1
            fi
          
            if [ ! -f NetworkMonitor.AppDir/networkmonitor.desktop ]; then
              echo "错误: 缺少桌面文件"
              exit 1
            fi
          
            # 使用 appimagetool 创建 AppImage
            ARCH=x86_64 ./appimagetool NetworkMonitor.AppDir NetworkMonitor-x86_64.AppImage
          fi
          
          # 检查生成的 AppImage 并重命名
          echo "检查生成的 AppImage 文件:"
          ls -la *.AppImage || echo "没有找到 AppImage 文件"
          
          # 统一重命名（处理不同的命名格式）
          if [ -f NetworkMonitor-x86_64.AppImage ]; then
            mv NetworkMonitor-x86_64.AppImage NetworkMonitor-Linux-x86_64.AppImage
            echo "重命名: NetworkMonitor-x86_64.AppImage -> NetworkMonitor-Linux-x86_64.AppImage"
          elif [ -f NetworkMonitor-*-x86_64.AppImage ]; then
            mv NetworkMonitor-*-x86_64.AppImage NetworkMonitor-Linux-x86_64.AppImage
            echo "重命名: $(ls NetworkMonitor-*-x86_64.AppImage) -> NetworkMonitor-Linux-x86_64.AppImage"
          fi
          
          echo "最终文件:"
          ls -la NetworkMonitor-Linux-x86_64.AppImage || echo "重命名失败"

      - name: Verify AppImage
        run: |
          echo "=== 验证 AppImage ==="
          
          # 首先列出所有可能的 AppImage 文件
          echo "当前目录中的所有文件："
          ls -la *.AppImage 2>/dev/null || echo "没有找到 .AppImage 文件"
          ls -la NetworkMonitor* 2>/dev/null || echo "没有找到 NetworkMonitor 相关文件"
          
          # 确定实际的 AppImage 文件名
          APPIMAGE_FILE=""
          if [ -f "NetworkMonitor-Linux-x86_64.AppImage" ]; then
            APPIMAGE_FILE="NetworkMonitor-Linux-x86_64.AppImage"
          elif [ -f "NetworkMonitor-x86_64.AppImage" ]; then
            APPIMAGE_FILE="NetworkMonitor-x86_64.AppImage"
          else
            # 查找任何 .AppImage 文件
            APPIMAGE_FILE=$(ls *.AppImage 2>/dev/null | head -n 1)
          fi
          
          if [ -z "$APPIMAGE_FILE" ] || [ ! -f "$APPIMAGE_FILE" ]; then
            echo "错误: 未找到 AppImage 文件"
            echo "当前目录内容："
            ls -la
            exit 1
          fi
          
          echo "使用 AppImage 文件: $APPIMAGE_FILE"
          
          # 检查文件基本信息
          echo "文件信息:"
          ls -lh "$APPIMAGE_FILE"
          file "$APPIMAGE_FILE"
          
          # 设置可执行权限
          chmod +x "$APPIMAGE_FILE"
          
          # 检查 AppImage 类型
          echo -e "\nAppImage 类型检查:"
          ./"$APPIMAGE_FILE" --appimage-help 2>/dev/null || echo "可能是 Type 1 AppImage 或不支持 --appimage-help"
          
          # 提取并检查内容（不执行）
          echo -e "\n测试 AppImage 提取能力:"
          ./"$APPIMAGE_FILE" --appimage-extract-and-run echo "AppImage 可以正常提取和运行" 2>/dev/null || {
            echo "尝试备选提取方法..."
            ./"$APPIMAGE_FILE" --appimage-extract >/dev/null 2>&1 && echo "AppImage 可以提取内容" || echo "提取测试失败，但 AppImage 可能仍然有效"
          }
          
          # 计算校验和
          echo -e "\n校验信息:"
          echo "SHA256: $(sha256sum "$APPIMAGE_FILE" | cut -d' ' -f1)"
          echo "大小: $(stat -c%s "$APPIMAGE_FILE" | numfmt --to=iec)"
          
          # 将实际文件名保存到环境变量供后续步骤使用
          echo "ACTUAL_APPIMAGE_FILE=$APPIMAGE_FILE" >> $GITHUB_ENV

      - name: Test AppImage (basic)
        run: |
          echo "=== 基础测试 AppImage ==="
          
          APPIMAGE_FILE="${ACTUAL_APPIMAGE_FILE}"
          
          if [ -z "$APPIMAGE_FILE" ] || [ ! -f "$APPIMAGE_FILE" ]; then
            echo "错误: AppImage 文件变量未设置或文件不存在"
            exit 1
          fi
          
          echo "测试文件: $APPIMAGE_FILE"
          
          # 基础启动测试（快速退出）
          echo "测试应用启动（5秒超时）..."
          timeout 5s ./"$APPIMAGE_FILE" --help 2>/dev/null || echo "应用可能需要 GUI 环境或不支持 --help 参数"
          
          # 检查是否创建了正确的临时挂载
          echo "测试 AppImage 挂载能力..."
          ./"$APPIMAGE_FILE" --appimage-mount &
          MOUNT_PID=$!
          sleep 2
          kill $MOUNT_PID 2>/dev/null || true
          
          echo "AppImage 基础测试完成"

      - name: Upload AppImage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: NetworkMonitor-Linux-x86_64-AppImage
          path: "*.AppImage"
          retention-days: 30

      - name: Upload AppDir (for debugging)
        uses: actions/upload-artifact@v4
        with:
          name: NetworkMonitor-AppDir-Debug
          path: NetworkMonitor.AppDir/
          retention-days: 7

      - name: Create release info
        run: |
          echo "=== 构建完成 ==="
          
          # 使用实际的 AppImage 文件
          APPIMAGE_FILE="${ACTUAL_APPIMAGE_FILE}"
          
          if [ -z "$APPIMAGE_FILE" ]; then
            # 如果环境变量未设置，尝试查找文件
            APPIMAGE_FILE=$(ls *.AppImage 2>/dev/null | head -n 1)
          fi
          
          if [ -f "$APPIMAGE_FILE" ]; then
            echo "AppImage 文件: $APPIMAGE_FILE"
            echo "大小: $(ls -lh "$APPIMAGE_FILE" | awk '{print $5}')"
            echo "SHA256: $(sha256sum "$APPIMAGE_FILE" | cut -d' ' -f1)"
          
            FILE_SIZE=$(ls -lh "$APPIMAGE_FILE" | awk '{print $5}')
            FILE_SHA256=$(sha256sum "$APPIMAGE_FILE" | cut -d' ' -f1)
          else
            echo "警告: 未找到 AppImage 文件"
            FILE_SIZE="未知"
            FILE_SHA256="未知"
          fi
          
          # 创建发布信息文件
          cat > release-info-linux.txt << EOF
          # NetworkMonitor Linux x86_64 AppImage
          
          ## 系统要求
          - Linux x86_64 (64位)
          - FUSE 支持 (大多数现代发行版默认支持)
          - 最低内核版本: 2.6+
          
          ## 安装和运行
          1. 下载 AppImage 文件
          2. 设置可执行权限: \`chmod +x *.AppImage\`
          3. 直接运行: \`./NetworkMonitor*.AppImage\`
          
          ## 特性
          - 自包含，无需安装依赖
          - 支持大多数 Linux 发行版
          - 便携式，可在任何位置运行
          
          ## 文件信息
          - 文件名: $APPIMAGE_FILE
          - 大小: $FILE_SIZE
          - SHA256: $FILE_SHA256
          - 构建时间: $(date -u)
          EOF
          
          echo "发布信息已创建"

      - name: Upload release info
        uses: actions/upload-artifact@v4
        with:
          name: NetworkMonitor-Linux-Release-Info
          path: release-info-linux.txt
          retention-days: 30