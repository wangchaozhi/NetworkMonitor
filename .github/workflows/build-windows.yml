name: Build Windows

on:
  workflow_dispatch:
#  push:
#    branches: [main]
#    paths:
#      - 'src/**'
#      - '*.csproj'
#      - '**.cs'

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Build x64 version
        run: |
          Write-Host "Building Windows x64..."
          dotnet publish NetworkMonitor.csproj -c Release -r win-x64 --self-contained true -o publish-x64

      - name: Build x86 version
        run: |
          Write-Host "Building Windows x86..."
          dotnet publish NetworkMonitor.csproj -c Release -r win-x86 --self-contained true -o publish-x86

      - name: Create portable packages
        run: |
          Write-Host "Creating portable packages..."
          
          # Create x64 package
          New-Item -ItemType Directory -Path "package-x64" -Force
          Copy-Item -Path "publish-x64\*" -Destination "package-x64\" -Recurse
          
          # Create README for x64
          $readme = "NetworkMonitor Windows x64 Portable`n" +
                    "===================================`n`n" +
                    "System Requirements:`n" +
                    "- Windows 10 or later (64-bit)`n" +
                    "- No additional software required`n`n" +
                    "Usage:`n" +
                    "1. Extract files to any folder`n" +
                    "2. Run NetworkMonitor.exe`n`n" +
                    "Build Date: $(Get-Date -Format 'yyyy-MM-dd')"
          
          $readme | Out-File -FilePath "package-x64\README.txt" -Encoding UTF8
          
          # Create x86 package
          New-Item -ItemType Directory -Path "package-x86" -Force
          Copy-Item -Path "publish-x86\*" -Destination "package-x86\" -Recurse
          
          # Create README for x86
          $readme32 = $readme.Replace("x64", "x86").Replace("64-bit", "32-bit")
          $readme32 | Out-File -FilePath "package-x86\README.txt" -Encoding UTF8
          
          # Create ZIP files
          Compress-Archive -Path "package-x64\*" -DestinationPath "NetworkMonitor-Windows-x64.zip" -Force
          Compress-Archive -Path "package-x86\*" -DestinationPath "NetworkMonitor-Windows-x86.zip" -Force

      - name: Create install scripts
        run: |
          Write-Host "Creating installation scripts..."
          
          # Install script
          $installScript = '# NetworkMonitor Installer' + "`n" +
                          'param(' + "`n" +
                          '    [string]$InstallPath = "$env:ProgramFiles\NetworkMonitor"' + "`n" +
                          ')' + "`n`n" +
                          'Write-Host "Installing NetworkMonitor to $InstallPath"' + "`n`n" +
                          'if (!(Test-Path $InstallPath)) {' + "`n" +
                          '    New-Item -ItemType Directory -Path $InstallPath -Force' + "`n" +
                          '}' + "`n`n" +
                          'Copy-Item -Path "NetworkMonitor.exe" -Destination $InstallPath -Force' + "`n" +
                          'Copy-Item -Path "*.dll" -Destination $InstallPath -Force -ErrorAction SilentlyContinue' + "`n`n" +
                          'Write-Host "Installation completed!"'
          
          $installScript | Out-File -FilePath "Install.ps1" -Encoding UTF8
          
          # Uninstall script
          $uninstallScript = '# NetworkMonitor Uninstaller' + "`n" +
                            'param(' + "`n" +
                            '    [string]$InstallPath = "$env:ProgramFiles\NetworkMonitor"' + "`n" +
                            ')' + "`n`n" +
                            'Write-Host "Uninstalling NetworkMonitor from $InstallPath"' + "`n`n" +
                            'if (Test-Path $InstallPath) {' + "`n" +
                            '    Remove-Item $InstallPath -Recurse -Force' + "`n" +
                            '}' + "`n`n" +
                            'Write-Host "Uninstallation completed!"'
          
          $uninstallScript | Out-File -FilePath "Uninstall.ps1" -Encoding UTF8

      - name: Create installer package
        run: |
          Write-Host "Creating installer package..."
          
          New-Item -ItemType Directory -Path "installer" -Force
          Copy-Item -Path "publish-x64\*" -Destination "installer\" -Recurse
          Copy-Item -Path "Install.ps1" -Destination "installer\"
          Copy-Item -Path "Uninstall.ps1" -Destination "installer\"
          
          $installGuide = "NetworkMonitor Installer Package`n" +
                         "================================`n`n" +
                         "Installation Options:`n`n" +
                         "1. Portable Mode:`n" +
                         "   - Run NetworkMonitor.exe directly`n`n" +
                         "2. Install Mode:`n" +
                         "   - Run PowerShell as Administrator`n" +
                         "   - Execute: .\Install.ps1`n`n" +
                         "Uninstall:`n" +
                         "   - Execute: .\Uninstall.ps1"
          
          $installGuide | Out-File -FilePath "installer\INSTALL.txt" -Encoding UTF8
          
          Compress-Archive -Path "installer\*" -DestinationPath "NetworkMonitor-Windows-x64-Installer.zip" -Force

      - name: Verify packages
        run: |
          Write-Host "Verifying packages..."
          
          Get-ChildItem -Path "." -Filter "NetworkMonitor-Windows-*.zip" | ForEach-Object {
            $size = [math]::Round($_.Length / 1MB, 2)
            Write-Host "Package: $($_.Name) - Size: ${size} MB"
          }

      - name: Test executables
        run: |
          Write-Host "Testing executables..."
          
          if (Test-Path "publish-x64\NetworkMonitor.exe") {
            Write-Host "x64 executable exists"
          }
          
          if (Test-Path "publish-x86\NetworkMonitor.exe") {
            Write-Host "x86 executable exists"
          }

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: NetworkMonitor-Windows-Packages
          path: |
            NetworkMonitor-Windows-*.zip
          retention-days: 30

      - name: Upload scripts
        uses: actions/upload-artifact@v4
        with:
          name: NetworkMonitor-Windows-Scripts
          path: |
            Install.ps1
            Uninstall.ps1
          retention-days: 30